unit ufrPadrao;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.ComCtrls, Vcl.ExtCtrls, Data.DB,
  Vcl.Grids, Vcl.DBGrids, JPDBGrid, Vcl.StdCtrls, Vcl.Buttons,
  FireDAC.Stan.Intf, FireDAC.Stan.Option, FireDAC.Stan.Param,
  FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf, FireDAC.DApt.Intf,
  FireDAC.Stan.Async, FireDAC.DApt, FireDAC.Comp.Client, FireDAC.Comp.DataSet,
  System.Actions, Vcl.ActnList, JvExStdCtrls, JvCombobox, JvDBCombobox, Vcl.Mask,
  ZAbstractRODataset, ZAbstractDataset, ZDataset, cxGraphics, cxLookAndFeels,
  cxLookAndFeelPainters, Vcl.Menus, dxSkinsCore, dxSkinsDefaultPainters,
  cxButtons;

type
  TfrmPadrao = class(TForm)
    pgcManute: TPageControl;
    tshConsul: TTabSheet;
    tshManute: TTabSheet;
    panBotoes: TPanel;
    panConsul: TPanel;
    grdConsul: TJPDBGrid;
    btnSalvar: TBitBtn;
    btnCancel: TBitBtn;
    Excluir: TBitBtn;
    btnSair: TBitBtn;
    bvlAdicio: TBevel;
    Bevel1: TBevel;
    Bevel2: TBevel;
    Bevel3: TBevel;
    panManute: TPanel;
    actBotoes: TActionList;
    actAdicio: TAction;
    actEditar: TAction;
    actSalvar: TAction;
    actCancel: TAction;
    actExclui: TAction;
    actPesqui: TAction;
    actCanPes: TAction;
    actSair: TAction;
    dtsConsul: TDataSource;
    dtsManute: TDataSource;
    actConsul: TAction;
    cbxPesqui: TJvDBComboBox;
    edtCodBar: TEdit;
    edtPesNum: TEdit;
    edtPesDat: TMaskEdit;
    edtPesTex: TEdit;
    lblCampos: TLabel;
    Label12: TLabel;
    qryConsul: TZQuery;
    qryManute: TZQuery;
    btnAdicio: TcxButton;
    btnEditar: TcxButton;
    procedure actCancelExecute(Sender: TObject);
    procedure actEditarExecute(Sender: TObject);
    procedure actExcluiExecute(Sender: TObject);
    procedure actSalvarExecute(Sender: TObject);
    procedure actAdicioExecute(Sender: TObject);
    procedure actPesquiExecute(Sender: TObject);
    procedure actSairExecute(Sender: TObject);
    procedure actCanPesExecute(Sender: TObject);
    procedure actConsulExecute(Sender: TObject);
    procedure dtsManuteDataChange(Sender: TObject; Field: TField);
    procedure grdConsulDblClick(Sender: TObject);
    procedure grdConsulTitleClick(Column: TColumn);
    procedure FormCreate(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure cbxPesquiCloseUp(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure grdConsulDrawColumnCell(Sender: TObject; const Rect: TRect;
      DataCol: Integer; Column: TColumn; State: TGridDrawState);
    procedure FormKeyPress(Sender: TObject; var Key: Char);
  private
    procedure ConfigBotoes(i: smallint = 0);
    procedure DeletaRegistro(Sender: TComponent;Result: Integer);
  protected
    iIncluir, iEditar, iExcluir, iCodigo: integer;
    sLista: TStringList;
  public
    { Public declarations }
  end;

var
  frmPadrao: TfrmPadrao;

implementation

{$R *.dfm}

uses  dmSever;

{ TfrmPadrao }

procedure TfrmPadrao.actAdicioExecute(Sender: TObject);
begin
  if qryManute.RecordCount > 0 then
    qryManute.EmptyDataSet;

  qryManute.Append;
    if pgcManute.ActivePage <> tshManute then
      pgcManute.ActivePage := tshManute;
  ConfigBotoes;
end;

procedure TfrmPadrao.actCancelExecute(Sender: TObject);
begin
  qryManute.Cancel;
  if pgcManute.ActivePage <> tshConsul then
     pgcManute.ActivePage := tshConsul;
  ConfigBotoes;
end;

procedure TfrmPadrao.actCanPesExecute(Sender: TObject);
begin
  if pgcManute.ActivePage = tshConsul then
    pgcManute.ActivePage := tshManute;
  ConfigBotoes;
end;

procedure TfrmPadrao.actConsulExecute(Sender: TObject);
begin
  ConfigBotoes;
end;

procedure TfrmPadrao.actEditarExecute(Sender: TObject);
begin
  if qryManute.Active then
    qryManute.Close;
  qryManute.Params[0].AsInteger := qryConsul.Fields[0].AsInteger;
  qryManute.Open;
  qryManute.Edit;
  if pgcManute.ActivePage = tshConsul then
    pgcManute.ActivePage := tshManute;
  ConfigBotoes;
end;

procedure TfrmPadrao.actExcluiExecute(Sender: TObject);
begin
  if  MessageDlg('Confirma exclusão do registro selecionado?', mtConfirmation,mbYesNo,0) = 6 then
    begin
      qryConsul.Delete;
      qryConsul.ApplyUpdates;
      qryConsul.Refresh;
    end;

  if pgcManute.ActivePage <> tshConsul then
     pgcManute.ActivePage := tshConsul;
  ConfigBotoes;
end;

procedure TfrmPadrao.actPesquiExecute(Sender: TObject);
begin
  if qryManute.State in [dsInsert,dsEdit] then
    qryManute.Cancel;
  if pgcManute.ActivePage = tshManute then
    pgcManute.ActivePage := tshConsul;
  if qryConsul.Active then
    qryConsul.Close;
  qryConsul.Open;
 // cbxPesquiCloseUp(nil);
  ConfigBotoes;
end;

procedure TfrmPadrao.actSairExecute(Sender: TObject);
begin
  Self.Close;
end;

procedure TfrmPadrao.actSalvarExecute(Sender: TObject);
begin
  try
    if qryManute.State in [dsEdit, dsInsert] then
      qryManute.Post;
    MessageDlg('Dados salvos com sucesso!', mtInformation, [mbOK],0);
    qryConsul.Refresh;

  Except
    MessageDlg('Problema ao salvar os dados!', mtError, [mbOk],0);
  end;
  if pgcManute.ActivePage <> tshConsul then
     pgcManute.ActivePage := tshConsul;
  ConfigBotoes;
end;

procedure TfrmPadrao.cbxPesquiCloseUp(Sender: TObject);
begin
//habilita os campos de pesquisa
  edtPesTex.Visible := (qryConsul.FieldDefs.Items[cbxPesqui.ItemIndex].DataType = ftString) or
                       (qryConsul.FieldDefs.Items[cbxPesqui.ItemIndex].DataType = ftWideString);
  edtPesDat.Visible := (qryConsul.FieldDefs.Items[cbxPesqui.ItemIndex].DataType = ftDateTime) or
                       (qryConsul.FieldDefs.Items[cbxPesqui.ItemIndex].DataType = ftDate);
  edtPesNum.Visible := (qryConsul.FieldDefs.Items[cbxPesqui.ItemIndex].DataType = ftInteger) or
                       (qryConsul.FieldDefs.Items[cbxPesqui.ItemIndex].DataType = ftSmallint)or
                       (qryConsul.FieldDefs.Items[cbxPesqui.ItemIndex].DataType = ftBCD);
  edtCodBar.Visible := (qryConsul.FieldDefs.Items[cbxPesqui.ItemIndex].DataType = ftLargeint);
  qryConsul.Filter := '';
  qryConsul.Filtered := true;
end;

procedure TfrmPadrao.ConfigBotoes(i: smallint);
begin
  //configura os botões
   actAdicio.Enabled := (qryManute.State in [dsBrowse]);// and (iIncluir = 1);
   actSalvar.Enabled := qryManute.State in [dsEdit, dsInsert];
   actCancel.Enabled := actSalvar.Enabled;
   actEditar.Enabled := ((pgcManute.ActivePage = tshManute) and
                         (actAdicio.Enabled) and not(qryManute.IsEmpty)) or
                        ((pgcManute.ActivePage = tshConsul) and not (qryConsul.IsEmpty));//and
                        //(iEditar = 1);
   actExclui.Enabled := (pgcManute.ActivePage = tshConsul) and (qryManute.State in [dsBrowse]) and
                         not (qryConsul.IsEmpty);// and (iExcluir = 1);
   actPesqui.Visible := pgcManute.ActivePage = tshManute;
   actCanPes.Visible := not actPesqui.Visible;
   actSair.Enabled   := actAdicio.Enabled;

end;

procedure TfrmPadrao.DeletaRegistro(Sender: TComponent; Result: Integer);
begin
   if Result = mrYes then
    begin
      try
      qryManute.Delete;
      qryManute.ApplyUpdates;
      if pgcManute.ActivePage = tshConsul then
        qryConsul.Refresh;
      except
      on E : Exception do
        MessageDlg('Erro ao tentar apagar o registro!' + #13 + E.Message, mtError, [mbOk],0);
      end;
    end;

end;

procedure TfrmPadrao.dtsManuteDataChange(Sender: TObject; Field: TField);
begin
  ConfigBotoes;
end;

procedure TfrmPadrao.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  FreeAndNil(frmPadrao);
end;

procedure TfrmPadrao.FormCreate(Sender: TObject);
var
i: integer;
region : hrgn;
begin  //Verifica os direitos que tem na tela
  qryConsul.Open;
  qryManute.Open;
//carrega o combo com os campos da tabela
  for i := 0 to qryConsul.FieldCount - 1 do
    begin
      if qryConsul.Fields[i].Visible then
        begin
          cbxPesqui.Items.Add(qryConsul.Fields[i].DisplayLabel);
          cbxPesqui.Values.Add(qryConsul.Fields[i].FieldName);
        end;
    end;


 // region:= CreateRoundRectRgn(5, 5, width, height, 0, 0);
 // setwindowrgn(handle, region, true);
end;

procedure TfrmPadrao.FormKeyPress(Sender: TObject; var Key: Char);
begin
  if key = #13 then
    begin  //se for, passa o foco para o próximo campo, zerando o valor da variável Key
      Key:= #0;
      Perform(Wm_NextDlgCtl,0,0);
    end;
end;

procedure TfrmPadrao.FormShow(Sender: TObject);
begin
  if qryManute.Active then
    qryManute.Close;
  qryManute.Open();
  if qryConsul.Active then
    qryConsul.Close;
  qryConsul.Open();
  if pgcManute.ActivePage = tshManute then
    pgcManute.ActivePage := tshConsul;
  cbxPesqui.ItemIndex := 0;
  cbxPesquiCloseUp(nil);
  ConfigBotoes;
end;

procedure TfrmPadrao.grdConsulDblClick(Sender: TObject);
begin
  if actEditar.Enabled then
    actEditarExecute(nil);
end;

procedure TfrmPadrao.grdConsulDrawColumnCell(Sender: TObject; const Rect: TRect;
  DataCol: Integer; Column: TColumn; State: TGridDrawState);
begin
  if Odd(qryConsul.RecNo)then
    begin
     grdConsul.Canvas.Font.Color  := clBlack;//StringToColor(lsCFGGriFo1);
     grdConsul.Canvas.Brush.Color := clWindow;//StringToColor(lsCFGGriLi1);;
    end
  else
    begin
     grdConsul.Canvas.Font.Color  := clBlack;//(lsCFGGriFo2);
     grdConsul.Canvas.Brush.Color := clBtnFace;//StringToColor(lsCFGGriLi2);
   end;
     grdConsul.Canvas.FillRect(Rect);
     grdConsul.Canvas.TextOut(Rect.Left+2, Rect.Top, Column.Field.AsString);
end;

procedure TfrmPadrao.grdConsulTitleClick(Column: TColumn);
begin
//ordena coluna de acordo com o click
  qryConsul.IndexFieldNames := Column.FieldName;
//posiciona o combo de acordo com o click na coluna
  cbxPesqui.ItemIndex       := Column.Index;
  cbxPesquiCloseUp(nil);
end;

end.
